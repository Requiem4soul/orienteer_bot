from datetime import timedelta
from uuid import UUID

from loguru import logger

from orienteer.general.config import CURRENCY_SIGN
from orienteer.general.data.orienteer.services import sponsors, orientiks
from orienteer.general.data.ss14.services import bans
from orienteer.general.utils.calculations import calculate_fine
from .abstract import AbstractProduct


class ColoredNick(AbstractProduct):
    id = 0
    name = '–¶–≤–µ—Ç–Ω–æ–π –Ω–∏–∫ –≤ OOC —á–∞—Ç–µ –Ω–∞ –º–µ—Å—è—Ü'
    price_tag = CURRENCY_SIGN
    description = f'–í–Ω–µ—Å–∏ –∫—Ä–∞—Å–∫–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å –∏ –≤—ã–¥–µ–ª–∏—Å—å –Ω–∞ —Ñ–æ–Ω–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. '
    '–ó–∞ 30 {CURRENCY_SIGN} —É–∫—Ä–∞—Å—å —Å–≤–æ–π –Ω–∏–∫ –≤ –û–û–° —á–∞—Ç–µ –∏–∑–º–µ–Ω–∏–≤ –µ–≥–æ —Ü–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤—ã–±–æ—Ä.'
    image_url = 'https://media.discordapp.net/attachments/1162830763390140548/1250350926124941312/OOC.png'
    '?ex=666a9f8b&is=66694e0b&hm=97af81ca5481befdfe55eb31caa31871912158bc6896cf1572f666e3d5c78fcd&='
    '&format=webp&quality=lossless&width=725&height=671'
    emoji = 'üñå'
    is_subscription = True
    cooldown = timedelta(days=31)

    @staticmethod
    async def calculate_price(user_id: UUID) -> int | None:
        return 29

    @staticmethod
    async def can_buy(user_id: UUID) -> bool:
        sponsor = await sponsors.get_sponsor(user_id)
        return sponsor is None or sponsor.ooc_color is None

    @staticmethod
    async def buy(user_id: UUID):
        logger.info(f'–ü–æ–∫—É–ø–∫–∞ {ColoredNick.name}')
        await sponsors.set_colored_nick(user_id, '87cefa')

    @staticmethod
    async def retrieve(user_id: UUID):
        logger.info(f'–í–æ–∑–≤—Ä–∞—Ç {ColoredNick.name}')
        await sponsors.set_colored_nick(user_id, None)


class GigachatAccess(AbstractProduct):
    id = 1
    name = '–î–æ—Å—Ç—É–ø –≤ –≥–∏–≥–∞—á–∞—Ç –Ω–∞ –º–µ—Å—è—Ü'
    price_tag = CURRENCY_SIGN
    description = '–ü—Ä–∏–∫–æ—Å–Ω–∏—Å—å –∫ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–º —É—Ä–æ–≤–Ω—è–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –û—Ä–∏–µ–Ω—Ç–∞ '
    '—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —Å—Ç–∞–Ω—å —á–ª–µ–Ω–æ–≤ —á–∞—Ç–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤. –¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ, –æ–±—Å—É–∂–¥–∞—è —Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥) '
    '—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏ –≤ –±–æ–ª–µ–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.'

    image_url = 'https://media.discordapp.net/attachments/1162830763390140548/1250350925860704268/GigaChat.png'
    '?ex=666a9f8b&is=66694e0b&hm=34ebe9a7aa56ebda9924aad7d6b427ed7a522b7b514ef77e59461cfb46ae9c3c&='
    '&format=webp&quality=lossless&width=725&height=671'
    emoji = 'üí¨'
    is_subscription = True
    cooldown = timedelta(days=31)

    @staticmethod
    async def calculate_price(user_id: UUID) -> int | None:
        return 19

    @staticmethod
    async def can_buy(user_id: UUID) -> bool:
        sponsor = await sponsors.get_sponsor(user_id)
        return sponsor is None or sponsor.have_sponsor_chat is None or not sponsor.have_sponsor_chat

    @staticmethod
    async def buy(user_id: UUID):
        logger.info(f'–ü–æ–∫—É–ø–∫–∞ {GigachatAccess.name}')
        await sponsors.set_sponsor_chat(user_id, True)

    @staticmethod
    async def retrieve(user_id: UUID):
        logger.info(f'–í–æ–∑–≤—Ä–∞—Ç {GigachatAccess.name}')
        await sponsors.set_sponsor_chat(user_id, False)


class PriorityQueue(AbstractProduct):
    id = 2
    name = '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –º–µ—Å—è—Ü'
    price_tag = CURRENCY_SIGN
    description = '–ï—Å–ª–∏ —Ç–µ–±–µ (–≤–Ω–µ–∑–∞–ø–Ω–æ) –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ –¥–æ–ª–≥–æ –æ–∂–∏–¥–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å '
    '—ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.'
    image_url = 'https://media.discordapp.net/attachments/1162830763390140548/1250350926716473465/Queue.png'
    '?ex=666a9f8b&is=66694e0b&hm=1bff6892241431d60d80ec58f24fe78b7bc8407dd5ec3d0740271f940c45ef1f&='
    '&format=webp&quality=lossless&width=725&height=671'
    emoji = '‚è©'
    is_subscription = True
    cooldown = timedelta(days=31)

    @staticmethod
    async def calculate_price(user_id: UUID) -> int | None:
        return 19

    @staticmethod
    async def can_buy(user_id: UUID) -> bool:
        sponsor = await sponsors.get_sponsor(user_id)
        return sponsor is None or sponsor.have_priority_join is None or not sponsor.have_priority_join

    @staticmethod
    async def buy(user_id: UUID):
        logger.info(f'–ü–æ–∫—É–ø–∫–∞ {PriorityQueue.name}')
        await sponsors.set_priority_join(user_id, True)

    @staticmethod
    async def retrieve(user_id: UUID):
        logger.info(f'–í–æ–∑–≤—Ä–∞—Ç {PriorityQueue.name}')
        await sponsors.set_priority_join(user_id, False)


class Orientalink(AbstractProduct):
    id = 3
    name = 'Orientalink –Ω–∞ –º–µ—Å—è—Ü'
    price_tag = CURRENCY_SIGN
    description = '–î–∞, –¥–∞, —Ç–æ—Ç —Å–∞–º—ã–π Orientalink —Å –∫—É—á–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª—é—à–µ–∫.'
    image_url = 'https://media.discordapp.net/attachments/1162830763390140548/1250350926716473465/Queue.png'
    '?ex=666a9f8b&is=66694e0b&hm=1bff6892241431d60d80ec58f24fe78b7bc8407dd5ec3d0740271f940c45ef1f&='
    '&format=webp&quality=lossless&width=725&height=671'
    emoji = 'üìª'
    is_subscription = True
    cooldown = timedelta(days=31)

    @staticmethod
    async def calculate_price(user_id: UUID) -> int | None:
        return 19

    @staticmethod
    async def can_buy(user_id: UUID) -> bool:
        sponsor = await sponsors.get_sponsor(user_id)
        return sponsor is None or 'Orientalink' not in sponsor.allowed_markings

    @staticmethod
    async def buy(user_id: UUID):
        logger.info(f'–ü–æ–∫—É–ø–∫–∞ {Orientalink.name}')
        await sponsors.add_marking(user_id, 'Orientalink')

    @staticmethod
    async def retrieve(user_id: UUID):
        logger.info(f'–í–æ–∑–≤—Ä–∞—Ç {Orientalink.name}')
        await sponsors.remove_marking(user_id, 'Orientalink')


class BanAnnulment(AbstractProduct):
    id = 4
    name = '–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∞'
    price_tag = f'{CURRENCY_SIGN} –∑–∞ –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω'
    description = '–ü–æ –≥–ª—É–ø–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ—á–µ–Ω—å —Ä–∞—Å–∫–∞–∏–≤–∞–µ—à—å—Å—è –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∞—Å—å '
    '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å —Ç–≤–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ? –° —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–≤–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ä–∞–Ω—å—à–µ '
    '–Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∑–¥—É–º–∞–µ—Ç—Å—è.\n'
    '(–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å 1 —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏, –æ–±–Ω—É–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–Ω)'
    image_url = 'https://media.discordapp.net/attachments/1162830763390140548/1250350926418673695/Pardon.png'
    '?ex=666a9f8b&is=66694e0b&hm=fd912a41bc5d1bf027410abdb5dde27d0e365d719a64f967d8ca1914d4a8b9ce&='
    '&format=webp&quality=lossless&width=725&height=671'
    emoji = 'üîì'
    is_subscription = False
    cooldown = timedelta(days=14)

    @staticmethod
    async def calculate_price(user_id: UUID) -> int | None:
        last_ban = await bans.get_last_ban(user_id)

        if last_ban is None:
            return 1

        expiration_time = last_ban['expiration_time']
        ban_time = last_ban['ban_time']

        if expiration_time is None:
            return None

        return int((calculate_fine(expiration_time - ban_time)) * 2.5)

    @staticmethod
    async def can_buy(user_id: UUID) -> bool:
        last_ban = await bans.get_last_ban(user_id)
        if last_ban is None or last_ban['expiration_time'] is None:
            return False
        else:
            return True

    @staticmethod
    async def buy(user_id: UUID):
        logger.info(f'–ü–æ–∫—É–ø–∫–∞ {BanAnnulment.name}')
        await bans.pardon_last_ban(user_id)

    @staticmethod
    async def retrieve(user_id: UUID):
        logger.info(f'–í–æ–∑–≤—Ä–∞—Ç {BanAnnulment.name}')
        raise NotImplementedError


class SevenNewSlots(AbstractProduct):
    id = 5
    name = '7 —Å–ª–æ—Ç–æ–≤ –Ω–∞ –º–µ—Å—è—Ü'
    price_tag = CURRENCY_SIGN
    description = '7 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.'
    image_url = 'https://media.discordapp.net/attachments/1162830763390140548/1250350926716473465/Queue.png'
    '?ex=666a9f8b&is=66694e0b&hm=1bff6892241431d60d80ec58f24fe78b7bc8407dd5ec3d0740271f940c45ef1f&='
    '&format=webp&quality=lossless&width=725&height=671'
    emoji = 'üé∞'
    is_subscription = True
    cooldown = timedelta(days=31)

    @staticmethod
    async def calculate_price(user_id: UUID) -> int | None:
        return None

    @staticmethod
    async def can_buy(user_id: UUID) -> bool:
        sponsor = await sponsors.get_sponsor(user_id)
        return sponsor is None or sponsor.extra_slots == 0

    @staticmethod
    async def buy(user_id: UUID):
        logger.info(f'–ü–æ–∫—É–ø–∫–∞ {SevenNewSlots.name}')
        await sponsors.add_extra_clots(user_id, 7)

    @staticmethod
    async def retrieve(user_id: UUID):
        logger.info(f'–í–æ–∑–≤—Ä–∞—Ç {SevenNewSlots.name}')
        await sponsors.add_extra_clots(user_id, -7)


class SevenOrientiks(AbstractProduct):
    id = 6
    name = '21 –æ—Ä–∏–µ–Ω—Ç–∏–∫ –Ω–∞ 24 —á–∞—Å–∞'
    price_tag = CURRENCY_SIGN
    description = ('–î–∞, —Ç—ã –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª —ç—Ç–æ 21 –æ—Ä–∏–µ–Ω—Ç–∏–∫ –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ 7 –æ—Ä–∏–µ–Ω—Ç–∏–∫–æ–≤. –í —á–µ–º –ø–æ–¥–≤–æ—Ö? –ü–æ–¥–≤–æ—Ö–∞ –Ω–µ—Ç. '
                   '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ 21 –æ—Ä–∏–µ–Ω—Ç–∏–∫ –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ 7 –æ—Ä–∏–µ–Ω—Ç–∏–∫–æ–≤.')
    image_url = 'https://media.discordapp.net/attachments/1162830763390140548/1250350926716473465/Queue.png'
    '?ex=666a9f8b&is=66694e0b&hm=1bff6892241431d60d80ec58f24fe78b7bc8407dd5ec3d0740271f940c45ef1f&='
    '&format=webp&quality=lossless&width=725&height=671'
    emoji = 'üí≥'
    is_subscription = True
    cooldown = timedelta(days=1)

    @staticmethod
    async def calculate_price(user_id: UUID) -> int | None:
        return None

    @staticmethod
    async def can_buy(user_id: UUID) -> bool:
        return True

    @staticmethod
    async def buy(user_id: UUID):
        logger.info(f'–ü–æ–∫—É–ø–∫–∞ {SevenOrientiks.name}')
        await orientiks.add_orientiks_from_sponsorship(user_id, 21)

    @staticmethod
    async def retrieve(user_id: UUID):
        logger.info(f'–í–æ–∑–≤—Ä–∞—Ç {SevenOrientiks.name}')
        await orientiks.add_orientiks_from_sponsorship(user_id, -21)
